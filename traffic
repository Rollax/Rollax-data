#traffic.csv
hdfs dfs -put traffic.csv /data2
Source = LOAD '/data2/traffic.csv' USING PigStorage(',') AS (year:int,cp:int,start:chararray,end:chararray,distance:float,cycle:float,motorbikes:float,cars:float,buses:float,vans:float,trucks:float);
dump Source;
rowData = FILTER Source BY year IS NOT NULL;
yearGroup = GROUP rowData BY year;
yearlyTotal = FOREACH yearGroup GENERATE group as year,SUM(rowData.distance) as totaldistance, SUM(rowData.vans) AS totalvans, SUM(rowData.trucks) AS totaltrucks;
dump yearlyTotal;
SortedTotal = ORDER yearlyTotal BY year;
STORE SortedTotal INTO '/data2/final_freight_traffic' USING PigStorage(' ');

#check in hadoop whether the data is inserted

@outputSchema("f_readings: {(year:int, totaldistance:float, totalvans:float, totaltrucks:float)}")

def to_miles(c_readings):
	    year,totaldistance,totalvans,totaltrucks = c_readings.split(' ')
	    miles = float(totaldistance)*0.62
	    return int(year), miles, float(totalvans), float(totaltrucks)

#put convert.py in hdfs
REGISTER 'hdfs:///data/convert.py' USING jython as convert_miles; 
rowData = LOAD '/data/final_freight_traffic' AS (traffic:chararray);
convTraffic = FOREACH rowData GENERATE FLATTEN(convert_miles.to_miles(traffic));
dump convTraffic
STORE convTraffic INTO '/data2/converted';

#hive
import string
import sys

while True:
	line = sys.stdin.readline()
	if not line:
		break
	row = string.strip(line,"\n")
	year,miles,totalvans,totaltrucks = string.split(row,"\t")
	totalfreight = float(totalvans) + float(totaltrucks)
	print "\t".join([year,miles,str(totalfreight)])
		
#put hive python file in hdfs

 DROP TABLE IF EXISTS freight;

CREATE EXTERNAL TABLE freight
    > (year int,
    > miles FLOAT,
    > vans FLOAT,
    > trucks FLOAT)
    > ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
    > Stored as textfile location '/data2/converted';

SELECT * FROM freight;

add file hdfs:///data2/total.py;

SELECT TRANSFORM(year, miles, vans, trucks)
USING 'python total.py'
AS (year INT, miles FLOAT, total_freight FLOAT)
FROM freight;
	






